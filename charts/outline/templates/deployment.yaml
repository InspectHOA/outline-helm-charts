apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "outline.fullname" . }}
  labels:
    {{- include "outline.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.outline.replicaCount }}
  selector:
    matchLabels:
      {{- include "outline.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "outline.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.outline.securityContext | nindent 8 }}
      {{- if or .Values.serviceAccount.create }}
      serviceAccountName: {{ include "outline.serviceAccountName" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.outline.containerPort }}
              name: http
          livenessProbe:
            {{- toYaml .Values.outline.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.outline.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.outline.resources | nindent 12 }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}

            # Core secrets (SECRET_KEY, UTILS_SECRET)
            {{- range $key, $value := .Values.secrets }}
            {{- if and (ne $key "auth") }}
            - name: {{ $key }}
              {{- if kindIs "map" $value }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName }}
                  key: {{ $value.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" $ }}-secrets
                  key: {{ $key }}
              {{- end }}
            {{- end }}
            {{- end }}

            # Auth environment variables based on auth type
            {{- if eq .Values.auth.type "google" }}
            # Google OAuth
            - name: GOOGLE_CLIENT_ID
              {{- if kindIs "map" .Values.auth.google.CLIENT_ID }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.google.CLIENT_ID.secretName }}
                  key: {{ .Values.auth.google.CLIENT_ID.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: GOOGLE_CLIENT_ID
              {{- end }}
            - name: GOOGLE_CLIENT_SECRET
              {{- if kindIs "map" .Values.auth.google.CLIENT_SECRET }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.google.CLIENT_SECRET.secretName }}
                  key: {{ .Values.auth.google.CLIENT_SECRET.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: GOOGLE_CLIENT_SECRET
              {{- end }}
            {{- else if eq .Values.auth.type "slack" }}
            # Slack OAuth
            - name: SLACK_CLIENT_ID
              {{- if kindIs "map" .Values.auth.slack.CLIENT_ID }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.slack.CLIENT_ID.secretName }}
                  key: {{ .Values.auth.slack.CLIENT_ID.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: SLACK_CLIENT_ID
              {{- end }}
            - name: SLACK_CLIENT_SECRET
              {{- if kindIs "map" .Values.auth.slack.CLIENT_SECRET }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.slack.CLIENT_SECRET.secretName }}
                  key: {{ .Values.auth.slack.CLIENT_SECRET.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: SLACK_CLIENT_SECRET
              {{- end }}
            {{- else if eq .Values.auth.type "azure" }}
            # Azure OAuth
            - name: AZURE_CLIENT_ID
              {{- if kindIs "map" .Values.auth.azure.CLIENT_ID }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.azure.CLIENT_ID.secretName }}
                  key: {{ .Values.auth.azure.CLIENT_ID.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: AZURE_CLIENT_ID
              {{- end }}
            - name: AZURE_CLIENT_SECRET
              {{- if kindIs "map" .Values.auth.azure.CLIENT_SECRET }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.azure.CLIENT_SECRET.secretName }}
                  key: {{ .Values.auth.azure.CLIENT_SECRET.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: AZURE_CLIENT_SECRET
              {{- end }}
            - name: AZURE_RESOURCE_APP_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.azure.RESOURCE_APP_ID.secretName }}
                  key: {{ .Values.auth.azure.RESOURCE_APP_ID.secretKey }}
            {{- else if eq .Values.auth.type "oidc" }}
            # OIDC Authentication
            - name: OIDC_CLIENT_ID
              {{- if kindIs "map" .Values.auth.oidc.CLIENT_ID }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.oidc.CLIENT_ID.secretName }}
                  key: {{ .Values.auth.oidc.CLIENT_ID.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: OIDC_CLIENT_ID
              {{- end }}
            - name: OIDC_CLIENT_SECRET
              {{- if kindIs "map" .Values.auth.oidc.CLIENT_SECRET }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.oidc.CLIENT_SECRET.secretName }}
                  key: {{ .Values.auth.oidc.CLIENT_SECRET.secretKey }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "outline.fullname" . }}-secrets
                  key: OIDC_CLIENT_SECRET
              {{- end }}
            - name: OIDC_AUTH_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.oidc.AUTH_URI.secretName }}
                  key: {{ .Values.auth.oidc.AUTH_URI.secretKey }}
            - name: OIDC_TOKEN_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.oidc.TOKEN_URI.secretName }}
                  key: {{ .Values.auth.oidc.TOKEN_URI.secretKey }}
            - name: OIDC_USERINFO_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.oidc.USERINFO_URI.secretName }}
                  key: {{ .Values.auth.oidc.USERINFO_URI.secretKey }}
            {{- end }}

            {{- if .Values.postgresql.enabled }}
            {{- if .Values.postgresql.auth.existingSecret }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgresql.auth.existingSecret }}"
                  key: "password"
              {{- if .Values.postgresql.auth.host }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- else }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- end }}
            {{- else }}
              {{- if .Values.postgresql.auth.host }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- else }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- end }}
            {{- end }}
          {{- else }}
            {{- if .Values.postgresql.auth.existingSecret }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgresql.auth.existingSecret }}"
                  key: "{{ .Values.postgresql.auth.existingSecretKey | default "password" }}"
              {{- if .Values.postgresql.auth.host }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- else }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- end }}
            {{- else }}
              {{- if .Values.postgresql.auth.host }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Values.postgresql.auth.host }}:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- else }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}"
            - name: DATABASE_URL_TEST
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.auth.port }}/{{ .Values.postgresql.auth.database }}_test"
              {{- end }}
            {{- end }}
            {{- end }}

            - name: DATABASE_CONNECTION_POOL_MIN
              value: "{{ .Values.outline.database.connectionPoolMin }}"
            - name: DATABASE_CONNECTION_POOL_MAX
              value: "{{ .Values.outline.database.connectionPoolMax }}"
            - name: PGSSLMODE
              value: "{{ .Values.outline.database.sslMode }}"

            {{- if and .Values.redis.auth.enabled .Values.redis.auth.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.redis.auth.existingSecret }}"
                  key: "{{ .Values.redis.auth.existingSecretPasswordKey | default "password" }}"
              {{- if .Values.redis.auth.host }}
            - name: REDIS_URL
              value: "{{ .Values.redis.auth.protocol | default "redis" }}://{{ .Values.redis.auth.username }}:$(REDIS_PASSWORD)@{{ .Values.redis.auth.host }}:{{ .Values.redis.auth.port }}"
              {{- else }}
            - name: REDIS_URL
              value: "{{ .Values.redis.auth.protocol | default "redis" }}://{{ .Values.redis.auth.username }}:$(REDIS_PASSWORD)@{{ .Release.Name }}-redis-master:{{ .Values.redis.auth.port }}"
              {{- end }}
            {{- else }}
            {{- if not .Values.redis.auth }}
            - name: REDIS_URL
              value: "{{ .Values.redis.auth.protocol | default "redis" }}://{{ .Values.redis.auth.host }}:{{ .Values.redis.auth.port }}"
            {{- end }}
            {{- end }}

            - name: COLLABORATION_URL
              value: "{{ .Values.optional.collaborationUrl }}"
            - name: FORCE_HTTPS
              value: "{{ .Values.optional.forceHttps }}"
            - name: ENABLE_UPDATES
              value: "{{ .Values.optional.enableUpdates }}"
            - name: WEB_CONCURRENCY
              value: "{{ .Values.optional.webConcurrency }}"
            - name: FILE_STORAGE_IMPORT_MAX_SIZE
              value: "{{ .Values.optional.fileStorageImportMaxSize}}"
            - name: LOG_LEVEL
              value: "{{ .Values.optional.logLevel }}"
            - name: GOOGLE_ANALYTICS_ID
              value: "{{ .Values.optional.googleAnalyticsId }}"
            - name: SENTRY_DSN
              value: "{{ .Values.optional.sentry.dsn }}"
            - name: SENTRY_TUNNEL
              value: "{{ .Values.optional.sentry.tunnel }}"

          {{- if .Values.optional.smtp.enabled }}
            {{- if .Values.optional.smtp.existingSecret }}
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.optional.smtp.existingSecret }}"
                  key: smtp-password
            {{- else }}
            - name: SMTP_PASSWORD
              value: "{{ .Values.optional.smtp.password }}"
            {{- end }}
            - name: SMTP_HOST
              value: "{{ .Values.optional.smtp.host }}"
            - name: SMTP_PORT
              value: "{{ .Values.optional.smtp.port }}"
            - name: SMTP_USERNAME
              value: "{{ .Values.optional.smtp.username }}"
            - name: SMTP_FROM_EMAIL
              value: "{{ .Values.optional.smtp.fromEmail }}"
            - name: SMTP_REPLY_EMAIL
              value: "{{ .Values.optional.smtp.replyEmail }}"
            - name: SMTP_TLS_CIPHERS
              value: "{{ .Values.optional.smtp.tlsCiphers }}"
            - name: SMTP_SECURE
              value: "{{ .Values.optional.smtp.secure }}"
          {{- end }}

          {{- if .Values.optional.github.enabled }}
            {{- if .Values.optional.github.clientId.existingSecret }}
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.optional.github.clientId.existingSecret }}"
                  key: github-client-id
            {{- else }}
            - name: GITHUB_CLIENT_ID
              value: "{{ .Values.optional.github.clientId.value }}"
            {{- end }}
            {{- if .Values.optional.github.clientSecret.existingSecret }}
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.optional.github.clientSecret.existingSecret }}"
                  key: github-client-secret
            {{- else }}
            - name: GITHUB_CLIENT_SECRET
              value: "{{ .Values.optional.github.clientSecret.value }}"
            {{- end }}
            {{- if .Values.optional.github.appName.existingSecret }}
            - name: GITHUB_APP_NAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.optional.github.appName.existingSecret }}"
                  key: github-app-name
            {{- else }}
            - name: GITHUB_APP_NAME
              value: "{{ .Values.optional.github.appName.value }}"
            {{- end }}
            {{- if .Values.optional.github.appId.existingSecret }}
            - name: GITHUB_APP_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.optional.github.appId.existingSecret }}"
                  key: github-app-id
            {{- else }}
            - name: GITHUB_APP_ID
              value: "{{ .Values.optional.github.appId.value }}"
            {{- end }}
            {{- if .Values.optional.github.appPrivateKey.existingSecret }}
            - name: GITHUB_APP_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.optional.github.appPrivateKey.existingSecret }}"
                  key: github-app-private-key
            {{- else }}
            - name: GITHUB_APP_PRIVATE_KEY
              value: "{{ .Values.optional.github.appPrivateKey.value }}"
            {{- end }}
          {{- end }}

          {{- if and (eq .Values.outline.fileStorage.type "s3") (.Values.minio.enabled) }}
            {{- if .Values.minio.auth.existingSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.minio.auth.existingSecret }}"
                  key: root-user
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.minio.auth.existingSecret }}"
                  key: root-password
            {{- else }}
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.minio.auth.rootUser }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.minio.auth.rootPassword }}"
            {{- end }}
            - name: AWS_REGION
              value: "{{ .Values.minio.s3Config.region }}"
            - name: AWS_S3_UPLOAD_BUCKET_NAME
              value: "{{ .Values.minio.s3Config.uploadBucketName }}"
            - name: AWS_S3_UPLOAD_BUCKET_URL
              value: "{{ .Values.minio.s3Config.uploadBucketUrl }}"
            - name: AWS_S3_FORCE_PATH_STYLE
              value: "{{ .Values.minio.s3Config.forcePathStyle }}"
            - name: AWS_S3_ACL
              value: "{{ .Values.minio.s3Config.acl }}"
            - name: FILE_STORAGE_UPLOAD_MAX_SIZE
              value: "{{ .Values.minio.s3Config.uploadMaxSize }}"
          {{- else if eq .Values.outline.fileStorage.type "local" }}
            - name: FILE_STORAGE
              value: "{{ .Values.outline.fileStorage.type }}"
            - name: FILE_STORAGE_LOCAL_ROOT_DIR
              value: "{{ .Values.outline.fileStorage.localRootDir }}"
            - name: FILE_STORAGE_UPLOAD_MAX_SIZE
              value: "{{ .Values.outline.fileStorage.uploadMaxSize }}"
          {{- end }}

          envFrom:
            - secretRef:
                name: {{ include "outline.fullname" . }}-secrets
            - configMapRef:
                name: {{ include "outline.fullname" . }}-config

      {{- if eq .Values.outline.fileStorage.type "local" }}
          volumeMounts:
          - name: {{ .Release.Name }}-data
            mountPath: {{ .Values.outline.fileStorage.localRootDir }}
      volumes:
      - name: {{ .Release.Name }}-data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-data
      {{- end }}
      {{- with .Values.outline.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.outline.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.outline.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
